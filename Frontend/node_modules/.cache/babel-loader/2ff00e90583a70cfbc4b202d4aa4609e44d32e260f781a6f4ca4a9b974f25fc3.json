{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prateek\\\\OneDrive\\\\Desktop\\\\Practice\\\\JObSearch\\\\JobSearch-Portal\\\\Frontend\\\\src\\\\Pages\\\\InternShips.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Layout from \"../components/Layout\";\nimport Internship from \"../components/Internship\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL + \"http://localhost:3000/api/internships\"; // Ensure that the API URL is correct\n\nconst InternShips = () => {\n  _s();\n  const [internships, setInternships] = useState([]); // State to store the internships data\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch data from the API when the component mounts\n    axios.get(API_URL).then(response => {\n      if (Array.isArray(response.data)) {\n        setInternships(response.data); // Store the internships data in state\n      } else {\n        setError(\"Invalid data format\"); // If the response is not an array\n      }\n\n      setLoading(false); // Set loading to false once data is fetched\n    }).catch(err => {\n      setError(\"Failed to load internships\"); // Handle error\n      setLoading(false);\n    });\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading internships...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Internship, {\n      internships: internships\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(InternShips, \"xh9OPZYsmyp5wbxle/RngR9GgHI=\");\n_c = InternShips;\nexport default InternShips;\nvar _c;\n$RefreshReg$(_c, \"InternShips\");","map":{"version":3,"names":["React","useState","useEffect","axios","Layout","Internship","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","InternShips","_s","internships","setInternships","loading","setLoading","error","setError","get","then","response","Array","isArray","data","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Prateek/OneDrive/Desktop/Practice/JObSearch/JobSearch-Portal/Frontend/src/Pages/InternShips.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Layout from \"../components/Layout\";\r\nimport Internship from \"../components/Internship\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL + \"http://localhost:3000/api/internships\"; // Ensure that the API URL is correct\r\n\r\nconst InternShips = () => {\r\n  const [internships, setInternships] = useState([]); // State to store the internships data\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the API when the component mounts\r\n    axios\r\n      .get(API_URL)\r\n      .then((response) => {\r\n        if (Array.isArray(response.data)) {\r\n          setInternships(response.data); // Store the internships data in state\r\n        } else {\r\n          setError(\"Invalid data format\"); // If the response is not an array\r\n        }\r\n        setLoading(false); // Set loading to false once data is fetched\r\n      })\r\n      .catch((err) => {\r\n        setError(\"Failed to load internships\"); // Handle error\r\n        setLoading(false);\r\n      });\r\n  }, []); // Empty dependency array ensures the effect runs only once\r\n\r\n  if (loading) return <p>Loading internships...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <Layout>\r\n      <Internship internships={internships} /> {/* Pass the internships data to the Internship component */}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default InternShips;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAG,uCAAuC,CAAC,CAAC;;AAEzF,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CACFiB,GAAG,CAACZ,OAAO,CAAC,CACZa,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAE;QAChCV,cAAc,CAACO,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACLN,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;MACnC;;MACAF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDS,KAAK,CAAEC,GAAG,IAAK;MACdR,QAAQ,CAAC,4BAA4B,CAAC,CAAC,CAAC;MACxCF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAID,OAAO,EAAE,oBAAOT,OAAA;IAAAqB,QAAA,EAAG;EAAsB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACjD,IAAId,KAAK,EAAE,oBAAOX,OAAA;IAAAqB,QAAA,EAAIV;EAAK;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAEhC,oBACEzB,OAAA,CAACH,MAAM;IAAAwB,QAAA,gBACLrB,OAAA,CAACF,UAAU;MAACS,WAAW,EAAEA;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEb,CAAC;AAACnB,EAAA,CA/BID,WAAW;AAAAqB,EAAA,GAAXrB,WAAW;AAiCjB,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}