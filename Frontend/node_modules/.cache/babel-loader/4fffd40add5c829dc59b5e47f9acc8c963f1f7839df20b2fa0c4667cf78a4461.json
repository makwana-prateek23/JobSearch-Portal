{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prateek\\\\OneDrive\\\\Desktop\\\\Practice\\\\JObSearch\\\\JobSearch-Portal\\\\Frontend\\\\src\\\\Contexts\\\\auth-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRole, setUserRole] = useState(\"\");\n\n  // Function to log in user and store token\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:3000/auth/login\", {\n        email,\n        password\n      });\n      if (response.status === 200) {\n        const {\n          role,\n          accessToken,\n          refreshToken\n        } = response.data;\n        localStorage.setItem(\"accessToken\", accessToken);\n        localStorage.setItem(\"refreshToken\", refreshToken);\n        localStorage.setItem(\"role\", role);\n        setIsAuthenticated(true);\n        setUserRole(role);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Login failed:\", error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Login failed\");\n    }\n  };\n\n  // Logout function to clear tokens\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    localStorage.removeItem(\"role\");\n    setIsAuthenticated(false);\n    setUserRole(\"\");\n  };\n\n  // Function to refresh token if expired\n  const refreshAccessToken = useCallback(async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (refreshToken) {\n      try {\n        const response = await axios.post(\"http://localhost:3000/auth/refresh\", {\n          token: refreshToken\n        });\n        const {\n          accessToken\n        } = response.data;\n        localStorage.setItem(\"accessToken\", accessToken);\n        return accessToken;\n      } catch (error) {\n        console.error(\"Token refresh failed:\", error);\n        logout();\n      }\n    }\n  }, [logout]);\n\n  // Check authentication status on load or token expiration\n  const checkAuthStatus = useCallback(async () => {\n    let accesstoken = localStorage.getItem(\"accessToken\");\n\n    // If token exists but is expired, attempt to refresh it\n    if (accesstoken && isTokenExpired(accesstoken)) {\n      accesstoken = await refreshAccessToken();\n    }\n    if (accesstoken) {\n      setIsAuthenticated(true);\n    } else {\n      setIsAuthenticated(false);\n    }\n  }, [refreshAccessToken]);\n\n  // Utility to check if token is expired\n  const isTokenExpired = token => {\n    const decoded = JSON.parse(atob(token.split(\".\")[1]));\n    return decoded.exp * 1000 < Date.now();\n  };\n\n  // Initialize auth status on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRole,\n      login,\n      logout,\n      checkAuthStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the AuthContext\n_s(AuthProvider, \"mbINTOL70MtBWEDDfY5Y0CUbvwU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRole","setUserRole","login","email","password","response","post","status","role","accessToken","refreshToken","data","localStorage","setItem","error","_error$response","_error$response$data","console","Error","message","logout","removeItem","refreshAccessToken","getItem","token","checkAuthStatus","accesstoken","isTokenExpired","decoded","JSON","parse","atob","split","exp","Date","now","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Prateek/OneDrive/Desktop/Practice/JObSearch/JobSearch-Portal/Frontend/src/Contexts/auth-context.js"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Create the AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRole, setUserRole] = useState(\"\");\r\n\r\n  // Function to log in user and store token\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:3000/auth/login\", {\r\n        email,\r\n        password,\r\n      });\r\n      if (response.status === 200) {\r\n        const { role, accessToken, refreshToken } = response.data;\r\n        localStorage.setItem(\"accessToken\", accessToken);\r\n        localStorage.setItem(\"refreshToken\", refreshToken);\r\n        localStorage.setItem(\"role\", role);\r\n        setIsAuthenticated(true);\r\n        setUserRole(role);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw new Error(error.response?.data?.message || \"Login failed\");\r\n    }\r\n  };\r\n\r\n  // Logout function to clear tokens\r\n  const logout = () => {\r\n    localStorage.removeItem(\"accessToken\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n    localStorage.removeItem(\"role\");\r\n    setIsAuthenticated(false);\r\n    setUserRole(\"\");\r\n  };\r\n\r\n  // Function to refresh token if expired\r\n  const refreshAccessToken = useCallback(async () => {\r\n    const refreshToken = localStorage.getItem(\"refreshToken\");\r\n    if (refreshToken) {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:3000/auth/refresh\",\r\n          { token: refreshToken }\r\n        );\r\n        const { accessToken } = response.data;\r\n        localStorage.setItem(\"accessToken\", accessToken);\r\n        return accessToken;\r\n      } catch (error) {\r\n        console.error(\"Token refresh failed:\", error);\r\n        logout();\r\n      }\r\n    }\r\n  }, [logout]);\r\n\r\n  // Check authentication status on load or token expiration\r\n  const checkAuthStatus = useCallback(async () => {\r\n    let accesstoken = localStorage.getItem(\"accessToken\");\r\n\r\n    // If token exists but is expired, attempt to refresh it\r\n    if (accesstoken && isTokenExpired(accesstoken)) {\r\n      accesstoken = await refreshAccessToken();\r\n    }\r\n\r\n    if (accesstoken) {\r\n      setIsAuthenticated(true);\r\n    } else {\r\n      setIsAuthenticated(false);\r\n    }\r\n  }, [refreshAccessToken]);\r\n\r\n  // Utility to check if token is expired\r\n  const isTokenExpired = (token) => {\r\n    const decoded = JSON.parse(atob(token.split(\".\")[1]));\r\n    return decoded.exp * 1000 < Date.now();\r\n  };\r\n\r\n  // Initialize auth status on component mount\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isAuthenticated, userRole, login, logout, checkAuthStatus }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}